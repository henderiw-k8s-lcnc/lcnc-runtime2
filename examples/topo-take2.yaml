for: 
  Topo: {gvr: topo.yndd.io/v1alpha1/topologydefintiions}
vars: 
  Targets: # returns a list (includes the name of the template)
    query: topo.yndd.io/v1alpha1/targets
  AllTemplates: # returns a list (includes the name of the template)
    query: topo.yndd.io/v1alpha1/templates
  ParentTemplateNames:
    for:
      range: $Topo.spec.properties.templates
      slice: $VALUE.name
  ParentTemplates:  # returns a list (includes the name of the template)
    for:
      range: $ParentTemplateNames
      map:
        key: $VALUE
        value: {query: $AllTemplates, selector: { name: parentTemplateName}}
  ChildTemplates:
    for:
      range: $ParentTemplates
      map:
        key: $VALUE.metadata.name
        value: {query: $AllTemplates, selector: { name: "$VALUE.spec.properties.fabric.pod[*].definitionRef"}}
  DiscoveryRuleNames:
    for:
      range: $Topo.spec.properties.discoveryRules
      slice: $VALUE.metatdata.name
resources:
  CreateTopology:
    function:
      image: topology
      input:
        topology: $Topo # can be implicit
      output: 
        Topologies: topo.yndd.io/v1alpha1/topologies
  CreateFabric:
    for:
      range: $ParentTemplates
    function:
      image: topologyBuilderFromTemplate
      vars: 
        childTemplates: {query: $ChildTemplates, selector: { name: $KEY}}
      input:
        parentTemplate: $ParentTemplate
        childTemplates: $childTemplates
      output: 
        TemplateNodes: topo.yndd.io/v1alpha1/nodes  
        Templatelinks: topo.yndd.io/v1alpha1/links
  CreateNode:
    for:
      range: $DiscoveryRuleNames
    function:
      image: nodeBuilderFromDiscoveryRule
      vars: 
        targets: {query: $Targets, selector: { name: $KEY}}
      input:
        targets: $targets
      output: 
        DiscoveryNodes: topo.yndd.io/v1alpha1/nodes 
