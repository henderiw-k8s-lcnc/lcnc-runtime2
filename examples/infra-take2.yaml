for: 
  Infra: {gvr: infra.yndd.io/v1alpha1/infrastructures}
own:
  Infra: {gvr: infra.yndd.io/v1alpha1/infrastructures}
watch: 
  Infra: {gvr: infra.yndd.io/v1alpha1/infrastructures, image: watchImage}
vars:
  Nodes:
    query: topo.yndd.io/v1alpha1/nodes
    selector:
      matchLabels:
        yndd.io/topology: $infra.spec.topology
  Links:
    query: topo.yndd.io/v1alpha1/links
    selector:
      matchLabels:
        yndd.io/topology: $infra.spec.topology
        yndd.io/linktype: infra
resources:
  NetworkInfraAllocator:
    for:
      range: $Links
    function:
      image: networkInfraAllocator
      vars:
        linkEpA: {query: $Nodes, selector: {matchLabels: { yndd.io/nodeName: $VALUE.spec.endpointA}}} 
        linkEpB: {query: $Nodes, selector: {matchLabels: { yndd.io/nodeName: $VALUE.spec.endpointB}}}
      input: 
        link: $VALUE
        linkEpA: $linkEpA
        linkEpB: $linkEpB
      output: 
        NodeInfo: nodeInfo
        AsAllocations: asAllocations  ## uses conditions
        NiAllocations: niAllocations ## uses conditions
        IpAllocations: ipAllocations ## uses conditions
  GenerateInfraConfig:
    for: 
      range: $NodeInfo
      #range: yndd.io/v1alpha1/nodeinfos -> both options should be possible
    function:
      image: infraConfig
      vars:
        asAllicationPerNode: {query: $AsAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}} 
        ipAllicationPerNode: {query: $IpAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}}
        niAllicationPerNode: {query: $NiAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}}
      input:
        nodeInfo: $VALUE
        asAllicationPerNode: $asAllicationPerNode
        ipAllicationPerNode: $ipAllicationPerNode
        niAllicationPerNode: $niAllicationPerNode  
      output: 
        Config: yndd.io/v1alpha1/networkConfigs
  GenerateState:
    for: 
      #range: yndd.io/v1alpha1/nodeInfos
      range: $NodeInfo
    function:
      image: state
      config: stateInfo
      input:
        config: $VALUE
      output: 
        State: yndd.io/v1alpha1/networkStates
services:
  asInjection: { function: {image: asInjection }}
  ipInjection: { function: {image: ipInjection }}
  niInjection: { function: {image: niInjection }}

# function -> name: infraConfig implements libraries
      #createInterface: physical (lag, member), loopback/system, irb
      #createTunnelInterface: vxlan or mple
      #create SubInterface: loopback/system
      #create route policy
      #create network instance
      #create bgp, group, evpn
      #create system evpn constructs