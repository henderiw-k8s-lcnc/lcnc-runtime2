for: 
  Vpc: {gvr: infra.yndd.io/v1alpha1/vpcs}
vars:
  Nodes:
    query: topo.yndd.io/v1alpha1/nodes
    selector:
      matchLabels:
        yndd.io/topology: $infra.spec.topology
  Links:
    query: topo.yndd.io/v1alpha1/links
    selector:
      matchLabels:
        yndd.io/topology: $infra.spec.topology
        yndd.io/linktype: not infra
resources:
  SelectNodeInterfaces:
    function:
      image: selectedNodeInterfaces # for bridges and routing tables, irb
      input: #-> map[string (gvk)][]string
        vpc:  $Vpc
        nodes: $Nodes
        links: $Links
      output:
        SelectedInterfaces: selectedInterfaces
        AsAllocations: asAllocations  ## uses conditions
        NiAllocations: niAllocations ## uses conditions
        IpAllocations: ipAllocations ## uses conditions
  GenerateVpcConfig:
    for:
      range: $SelectedInterfaces
    function:
      image: generateVpcConfig
      vars:
        asAllicationPerNode: {query: $AsAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}} 
        ipAllicationPerNode: {query: $IpAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}}
        niAllicationPerNode: {query: $NiAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}}
      input: 
        internalInterface: $VALUE
        asAllicationPerNode: $asAllicationPerNode
        ipAllicationPerNode: $ipAllicationPerNode
        niAllicationPerNode: $niAllicationPerNode
      output:
        Configs: yndd.io/v1alpha1/networkconfigs
  GenerateState:
    for: 
      range: $Configs
      #range: yndd.io/v1alpha1/networkconfigs
    function:
      image: state
      config: stateInfo
      input: 
        config: $VALUE
      output:
        states: yndd.io/v1alpha1/networkstates
services:
  asInjection: { function: {image: asInjection }}
  ipInjection: { function: {image: ipInjection }}
  niInjection: { function: {image: niInjection }}