for: 
  Vpc: 
    gvr: infra.yndd.io/v1alpha1/vpcs
vars:
  Nodes:
    query: topo.yndd.io/v1alpha1/nodes
    selector:
      matchLabels:
        yndd.io/topology: $infra.spec.topology
  Links:
    query: topo.yndd.io/v1alpha1/Link
    selector:
      matchLabels:
        yndd.io/topology: $infra.spec.topology
resources:
  GenerateVpcConfig:
    function:
      image: generateVpcConfig
      input: 
        nodes: $Nodes
        links: $Links
      output:
        VpcConfigs: yndd.io/v1alpha1/networkconfigs
        AsAllocations: asAllocations  ## uses conditions
        NiAllocations: niAllocations ## uses conditions
        IpAllocations: ipAllocations ## uses conditions
  InjectIPNI:
    for: 
      range: $VpcConfigs # -> this is the only option
      #range: yndd.io/v1alpha1/networkconfigs -> not possible
    function:
      image: injectIPNI        
      vars:
        asAllicationPerNode: {query: $AsAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}} 
        ipAllicationPerNode: {query: $IpAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}}
        niAllicationPerNode: {query: $NiAllocations, selector: {matchLabels: { yndd.io/nodeName: $VALUE.name}}}
      input: 
        config: $VALUE
        asAllicationPerNode: $asAllicationPerNode
        ipAllicationPerNode: $ipAllicationPerNode
        niAllicationPerNode: $niAllicationPerNode
      output:
        ExpandedVpcConfigs: yndd.io/v1alpha1/networkconfigs
  GenerateState:
    for: 
      range: $VpcConfigs # -> this is the only option
      #range: yndd.io/v1alpha1/networkconfigs -> not possible
    function:
      image: state
      config: stateInfo
      input: 
        config: $VALUE
      output:
        states: yndd.io/v1alpha1/networkstates
services:
  asInjection: { function: {image: asInjection }}
  ipInjection: { function: {image: ipInjection }}
  niInjection: { function: {image: niInjection }}
